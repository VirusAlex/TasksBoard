import { generateId, formatDateTime, formatTimeLeft, formatDeadlineTime } from './utils.js';
import { initTouchDrag } from './modules/touchDragHandler.js';

function initApp() {

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ü–≤–µ—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const defaultTaskColors = {
    pending: '#f1c40f',
    info: '#3498db',
    done: '#2ecc71'
  };

  const darkThemeTaskColors = {
    pending: '#f39c12',
    info: '#2980b9',
    done: '#27ae60'
  };

  let data = JSON.parse(localStorage.getItem('taskBoardsData') || 'null') || {
    boards: [],
    selectedBoardId: null,
    isCalendarView: false
  };
  let resetTimeIntervals = new Map();
  let currentDate = new Date();

  // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
  const boardsEl = document.getElementById('boards');
  const addBoardBtn = document.getElementById('add-board-btn');
  const boardTitleEl = document.getElementById('board-title');
  const columnsEl = document.getElementById('columns');
  const addColumnBtn = document.getElementById('add-column-btn');
  const mainEl = document.getElementById('main');

  columnsEl.addEventListener('dragover', (e) => {
    const draggingCol = document.querySelector('.column.dragging');
    if (!draggingCol) return;
    e.preventDefault();
    e.stopPropagation();
    showColumnDropIndicator(e, draggingCol);
  });

  columnsEl.addEventListener('drop', (e) => {
    handleColumnDrop(e);
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á: –µ—Å–ª–∏ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è > –¥–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî —Å–Ω—è—Ç—å –æ—Ç–º–µ—Ç–∫—É
  // –°—á–∏—Ç–∞–µ–º, —á—Ç–æ "–Ω–æ–≤—ã–π –¥–µ–Ω—å" ‚Äî —ç—Ç–æ –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ (YYYY-MM-DD) –∏–∑–º–µ–Ω–∏–ª–∞—Å—å.
  let today = new Date().toISOString().slice(0,10);
  data.boards.forEach(board => {
    board.columns.forEach(col => {
      col.tasks.forEach(task => {
        if (task.repeating && task.done && task.doneDate && task.doneDate < today) {
          task.done = false;
          task.doneDate = null;
        }
      });
    });
  });

  function saveData() {
    localStorage.setItem('taskBoardsData', JSON.stringify(data));
  }

  function renderBoardsList() {
    boardsEl.innerHTML = '';
    data.boards.forEach(board => {
      const li = document.createElement('li');
      li.textContent = board.name;
      li.dataset.boardId = board.id;
      
      if (data.selectedBoardId === board.id) {
        li.className = 'selected';
      }
      
      boardsEl.appendChild(li);
    });
  }

  function getSelectedBoard() {
    return data.boards.find(b => b.id === data.selectedBoardId);
  }

  function renderBoard() {
    const board = getSelectedBoard();
    if (!board) {
      boardTitleEl.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å–∫—É –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é';
      columnsEl.innerHTML = '';
      return;
    }

    // –î–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ—Å–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º
    boardTitleEl.textContent = board.name;
    boardTitleEl.style.cursor = 'pointer';
    boardTitleEl.title = '–î–≤–∞–∂–¥—ã —â–µ–ª–∫–Ω–∏—Ç–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è';

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    boardTitleEl.addEventListener('dblclick', () => {
      openBoardDialog(board);
    });

    columnsEl.innerHTML = '';

    board.columns.forEach(column => {
      const colEl = document.createElement('div');
      colEl.className = 'column';
      colEl.dataset.columnId = column.id;
      colEl.draggable = true;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–æ–ª–æ–Ω–∫–∏
      const headerEl = document.createElement('div');
      headerEl.className = 'column-header';

      const titleEl = document.createElement('h3');
      titleEl.textContent = column.name;
      headerEl.appendChild(titleEl);

      const stats = getColumnStats(column);
      if (stats.total > 0) {
        const statsEl = document.createElement('div');
        statsEl.className = 'column-stats';
        statsEl.innerHTML = `
          <span class="stats-done">${stats.done}</span>
          <span class="stats-separator">/</span>
          <span class="stats-total">${stats.total}</span>
        `;
        headerEl.appendChild(statsEl);
      }

      colEl.appendChild(headerEl);

      headerEl.addEventListener('dblclick', () => {
        openColumnDialog(column);
      });

      colEl.addEventListener('dragstart', (e) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª–∏ —Ç–∞—â–∏—Ç—å –∑–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏
        const header = colEl.querySelector('.column-header');
        if (!e.target.contains(header)) {
          e.preventDefault();
          return;
        }

        colEl.classList.add('dragging');
        document.body.classList.add('dragging');
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
        if (e.dataTransfer) {
          e.dataTransfer.setData('text/plain', colEl.dataset.columnId);
        } else if (e.detail?.dataTransfer) {
          e.detail.dataTransfer.setData('text/plain', colEl.dataset.columnId);
        }
      });

      colEl.addEventListener('dragend', () => {
        colEl.classList.remove('dragging');
        document.body.classList.remove('dragging');
        removeAllDropIndicators();
      });

      // ================================
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Drag & Drop —Ç–∞—Å–∫–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏
      // ================================
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ç–∞—Å–∫–∞ –Ω–∞–¥ –∫–æ–ª–æ–Ω–∫–æ–π
      colEl.addEventListener('dragover', (e) => {
        const draggingTask = document.querySelector('.task.dragging');
        const draggingCol = document.querySelector('.column.dragging');
        if (!draggingTask && !draggingCol) return;

        if (draggingTask) {
          showTaskDropIndicator(e, colEl, draggingTask);
        } else {
          // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É
          if (draggingCol === colEl) return;
          showColumnDropIndicator(e, draggingCol);
        }
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è —Ç–∞—Å–∫–∞ –Ω–∞–¥ –∫–æ–ª–æ–Ω–∫–æ–π
      colEl.addEventListener('drop', (e) => {
        console.log('colEl drop: ', JSON.stringify(e));
        if (isProcessingDrop) return;

        const draggingTask = document.querySelector('.task.dragging');
        const draggingCol = document.querySelector('.column.dragging');
        if (!draggingTask && !draggingCol) return;

        e.preventDefault();
        e.stopPropagation();

        if (draggingTask) {
          handleTaskDrop(e, colEl);
        } else {
          handleColumnDrop(e);
        }
      });
      // ================================

      column.tasks
          .filter(task => !task.parentId) // –¢–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
          .forEach(task => renderTask(task, colEl));

      // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
      const addTaskBtn = document.createElement('button');
      addTaskBtn.className = 'add-btn';
      addTaskBtn.textContent = '+ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É';
      addTaskBtn.onclick = () => {
        openTaskDialog(column);
      };
      colEl.appendChild(addTaskBtn);

      columnsEl.appendChild(colEl);
    });
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
  function moveTaskToColumn(taskId, newColumnId, position = -1) {
    const board = getSelectedBoard();
    const task = findTaskById(taskId);

    if (!task) return;

    // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–∞
    removeTaskFromCurrentPosition(task);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º parentId, —Ç–∞–∫ –∫–∞–∫ –∑–∞–¥–∞—á–∞ —Ç–µ–ø–µ—Ä—å –Ω–µ —Å–∞–±—Ç–∞—Å–∫
    task.parentId = null;

    // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
    const targetColumn = board.columns.find(col => col.id === newColumnId);
    if (!targetColumn) return;

    // –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –Ω—É–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    if (position >= 0) {
      targetColumn.tasks.splice(position, 0, task);
    } else {
      targetColumn.tasks.push(task);
    }

    saveData();
    render();
  }

  addBoardBtn.addEventListener('click', () => {
    openBoardDialog();
  });

  addColumnBtn.addEventListener('click', () => {
    openColumnDialog();
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é render
  function render() {
    renderBoardsList();
    const calendarViewEl = document.getElementById('calendar-view');

    if (data.isCalendarView) {
      renderCalendar();
      calendarViewEl?.classList.add('selected');
      document.getElementById('board-view').style.display = 'none';
      document.getElementById('calendar-view-content').style.display = 'block';
      boardTitleEl.textContent = '–ö–∞–ª–µ–Ω–¥–∞—Ä—å';
    } else {
      renderBoard();
      calendarViewEl?.classList.remove('selected');
      document.getElementById('board-view').style.display = 'block';
      document.getElementById('calendar-view-content').style.display = 'none';
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  if (data.boards.length === 0) {
    // –°–æ–∑–¥–∞–¥–∏–º –æ–¥–Ω—É –¥–æ—Å–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const defaultBoard = {
      id: generateId(),
      name: "–ú–æ—è –ø–µ—Ä–≤–∞—è –¥–æ—Å–∫–∞",
      columns: [{
        id: generateId(),
        name: "To Do",
        tasks: []
      }]
    };
    data.boards.push(defaultBoard);
    data.selectedBoardId = defaultBoard.id;
    saveData();
  }

  render();

  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–∫—Ä–∏–ø—Ç–∞, –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  const themeToggle = document.getElementById('theme-toggle');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
  const savedTheme = localStorage.getItem('theme');
  if (savedTheme === 'dark') {
    document.body.classList.add('dark-theme');
    themeToggle.querySelector('span').textContent = '‚òÄÔ∏è';
  } else {
    themeToggle.querySelector('span').textContent = 'üåô';
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
  themeToggle.addEventListener('click', () => {
    document.body.classList.toggle('dark-theme');
    const isDark = document.body.classList.contains('dark-theme');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
    themeToggle.querySelector('span').textContent = isDark ? '‚òÄÔ∏è' : 'üåô';
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏–∞–ª–æ–≥–æ–º
  function openTaskDialog(column, existingTask = null) {
    const dialog = document.getElementById('task-dialog');
    const form = dialog.querySelector('form');
    const titleInput = document.getElementById('task-title');
    const descriptionInput = document.getElementById('task-description');
    const insertLinkBtn = document.getElementById('insert-link-btn');

    // Add event listener for insert link button
    insertLinkBtn.addEventListener('click', async () => {
      const linkDialog = document.getElementById('link-dialog');
      const linkForm = linkDialog.querySelector('form');
      const urlInput = document.getElementById('link-url');
      const textInput = document.getElementById('link-text');

      // Clear form
      linkForm.reset();

      // If there's selected text, use it as link text
      const selectedText = descriptionInput.value.substring(
        descriptionInput.selectionStart,
        descriptionInput.selectionEnd
      );
      if (selectedText) {
        textInput.value = selectedText;
      }

      linkDialog.showModal();

      // Wait for dialog close
      const closePromise = new Promise(resolve => {
        linkDialog.addEventListener('close', () => resolve(linkDialog.returnValue), { once: true });
      });

      linkForm.onsubmit = (e) => {
        e.preventDefault();
        linkDialog.close('submit');
      };

      const result = await closePromise;
      if (result === 'submit') {
        const url = urlInput.value;
        const text = textInput.value || url;
        const link = `[${text}](${url})`;

        // Insert link into text
        const start = descriptionInput.selectionStart;
        const end = descriptionInput.selectionEnd;
        descriptionInput.value =
          descriptionInput.value.substring(0, start) +
          link +
          descriptionInput.value.substring(end);
      }
    });

    // Remove event listener when dialog closes
    dialog.addEventListener('close', () => {
      insertLinkBtn.removeEventListener('click', () => {});
    }, { once: true });

    descriptionInput.addEventListener('input', updateLineNumbers);
    descriptionInput.addEventListener('scroll', () => {
      const lineNumbers = descriptionInput.closest('.description-container').querySelector('.line-numbers');
      lineNumbers.scrollTop = descriptionInput.scrollTop;
    });

    // –í—ã–∑—ã–≤–∞–µ–º updateLineNumbers –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    setTimeout(updateLineNumbers, 0);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∏—Å—Ç–∫—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    dialog.addEventListener('close', () => {
      descriptionInput.removeEventListener('input', updateLineNumbers);
      descriptionInput.removeEventListener('scroll', () => {});
      resizeObserver.disconnect();
    }, { once: true });

    const repeatCheckbox = document.getElementById('task-repeat');
    const infoCheckbox = document.getElementById('task-info'); // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    const resetTimeInput = document.getElementById('reset-time');
    const resetTimeGroup = document.querySelector('.reset-time-group');
    const submitButton = form.querySelector('button[type="submit"]');
    const deadlineGroup = document.getElementById('deadline-group');
    const deadlineEnabled = document.getElementById('task-deadline-enabled');
    const deadlineInputs = document.getElementById('deadline-inputs');
    const deadlineDate = document.getElementById('deadline-date');
    const deadlineTime = document.getElementById('deadline-time');

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É (—Å–µ–≥–æ–¥–Ω—è) –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–¥–ª–∞–π–Ω–∞
    // const today = new Date().toISOString().split('T')[0];
    // deadlineDate.min = today;

    const taskColorsEl = document.getElementById('task-colors');
    const doneColorsEl = document.getElementById('done-colors');
    const doneColorGroup = document.getElementById('done-color-group');
    const customTaskColorInput = document.getElementById('custom-task-color');
    const customDoneColorInput = document.getElementById('custom-done-color');
    const resetTaskColorBtn = document.getElementById('reset-task-color');
    const resetDoneColorBtn = document.getElementById('reset-done-color');

    resetTaskColorBtn.addEventListener('click', () => {
      updateSelectedColor(taskColorsEl, null);
    });

    resetDoneColorBtn.addEventListener('click', () => {
      updateSelectedColor(doneColorsEl, null);
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
    function updateSelectedColor(container, color) {
      container.querySelectorAll('.color-option').forEach(option => {
        option.classList.remove('selected');
        if (color && option.dataset.color === color) {
          option.classList.add('selected');
        }
      });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
    taskColorsEl.addEventListener('click', (e) => {
      const option = e.target.closest('.color-option');
      if (!option) return;

      const color = option.dataset.color;
      updateSelectedColor(taskColorsEl, color);
    });

    doneColorsEl.addEventListener('click', (e) => {
      const option = e.target.closest('.color-option');
      if (!option) return;

      const color = option.dataset.color;
      updateSelectedColor(doneColorsEl, color);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
    customTaskColorInput.addEventListener('input', (e) => {
      const color = e.target.value;
      e.target.closest('.color-option').dataset.color = color;
      updateSelectedColor(taskColorsEl, color);
    });

    customDoneColorInput.addEventListener('input', (e) => {
      const color = e.target.value;
      e.target.closest('.color-option').dataset.color = color;
      updateSelectedColor(doneColorsEl, color);
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    function updateColorGroups() {
      doneColorGroup.style.display = infoCheckbox.checked ? 'none' : 'block';
    }

    const board = getSelectedBoard();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º subtasks —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –∏—Ö –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    const existingSubtasks = existingTask ? existingTask.subtasks : [];

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
    const breadcrumbsEl = dialog.querySelector('.dialog-breadcrumbs');
    const titleEl = dialog.querySelector('h3');

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å
    let breadcrumbs = [board.name, column.name];

    if (existingTask && existingTask.parentId) {
      const parentPath = getTaskPath(existingTask);
      breadcrumbs = breadcrumbs.concat(parentPath);
    }

    breadcrumbsEl.textContent = breadcrumbs.join(' ‚Üí ');
    titleEl.textContent = existingTask ? existingTask.title : '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞';

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    submitButton.textContent = existingTask ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å';

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–æ–ª—è –¥–µ–¥–ª–∞–π–Ω–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏
    const handleRepeatChange = () => {
      resetTimeGroup.style.display = repeatCheckbox.checked ? 'block' : 'none';
      if (repeatCheckbox.checked) {
        deadlineGroup.style.display = 'none';
        deadlineEnabled.checked = false;
        deadlineInputs.style.display = 'none';
      } else {
        deadlineGroup.style.display = '';
        resetTimeInput.value = '';
      }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ –¥–µ–¥–ª–∞–π–Ω–∞
    const handleDeadlineChange = () => {
      deadlineInputs.style.display = deadlineEnabled.checked ? 'block' : 'none';
      if (!deadlineEnabled.checked) {
        deadlineDate.value = '';
        deadlineTime.value = '';
      }
    };

    deadlineEnabled.addEventListener('change', handleDeadlineChange);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–æ–ª—è –¥–µ–¥–ª–∞–π–Ω–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
    const handleInfoChange = () => {
      if (infoCheckbox.checked) {
        // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å—Ç–∞–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è
        repeatCheckbox.checked = false;
        resetTimeGroup.style.display = 'none';
        resetTimeInput.value = '';
        // –°–∫—Ä—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º
        repeatCheckbox.closest('.form-group').style.display = 'none';
        deadlineGroup.style.display = 'none';
        deadlineEnabled.checked = false;
        deadlineInputs.style.display = 'none';
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        repeatCheckbox.closest('.form-group').style = '';
        deadlineGroup.style.display = '';
      }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    repeatCheckbox.addEventListener('change', handleRepeatChange);
    infoCheckbox.addEventListener('change', handleInfoChange);
    infoCheckbox.addEventListener('change', updateColorGroups);

    // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    const cleanup = () => {
      repeatCheckbox.removeEventListener('change', handleRepeatChange);
      infoCheckbox.removeEventListener('change', handleInfoChange);
      dialog.removeEventListener('close', cleanup);
    };

    dialog.addEventListener('close', cleanup);

    // –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (existingTask) {
      titleInput.value = existingTask.title;
      descriptionInput.value = existingTask.description || '';
      infoCheckbox.checked = existingTask.isInfo || false;
      repeatCheckbox.checked = existingTask.repeating || false;
      resetTimeInput.value = existingTask.resetTime || '';

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞
      if (existingTask.deadline) {
        const deadline = new Date(existingTask.deadline);
        deadlineEnabled.checked = true;
        deadlineDate.value = deadline.toISOString().split('T')[0];
        deadlineTime.value = deadline.toTimeString().slice(0, 5);
        deadlineInputs.style.display = 'block';
      } else {
        deadlineEnabled.checked = false;
        deadlineInputs.style.display = 'none';
      }

      updateSelectedColor(taskColorsEl, existingTask.color || null);
      updateSelectedColor(doneColorsEl, existingTask.doneColor || null);
      updateColorGroups();
      handleInfoChange();
      handleRepeatChange();
    } else {
      form.reset();
      resetTimeGroup.style.display = 'none';
      deadlineInputs.style.display = 'none';

      updateSelectedColor(taskColorsEl, null);
      updateSelectedColor(doneColorsEl, null);
      updateColorGroups();
      handleInfoChange();
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
    const deleteBtn = form.querySelector('.delete-btn');
    if (existingTask) {
      deleteBtn.style.display = 'block';
      deleteBtn.onclick = async () => {
        const confirmed = await showConfirmDialog(
            `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É "${existingTask.title}"?`
        );
        if (confirmed) {
          const taskIndex = column.tasks.findIndex(t => t.id === existingTask.id);
          if (taskIndex !== -1) {
            column.tasks.splice(taskIndex, 1);
            saveData();
            render();
            dialog.close();
          }
        }
      };
    } else {
      deleteBtn.style.display = 'none';
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    form.onsubmit = (e) => {
      e.preventDefault();

      const selectedTaskColor = taskColorsEl.querySelector('.color-option.selected')?.dataset.color;
      const selectedDoneColor = doneColorsEl.querySelector('.color-option.selected')?.dataset.color;

      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ
      let deadline = null;
      if (!infoCheckbox.checked && !repeatCheckbox.checked && deadlineEnabled.checked) {
        if (deadlineDate.value && deadlineTime.value) {
          deadline = new Date(deadlineDate.value + 'T' + deadlineTime.value).toISOString();
        }
      }

      const taskData = {
        id: existingTask ? existingTask.id : generateId(),
        title: titleInput.value.trim(),
        description: descriptionInput.value.trim(),
        // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è
        done: infoCheckbox.checked ? false : (existingTask ? existingTask.done : false),
        doneDate: infoCheckbox.checked ? null : (existingTask ? existingTask.doneDate : null),
        repeating: infoCheckbox.checked ? false : repeatCheckbox.checked,
        resetTime: infoCheckbox.checked ? null : (repeatCheckbox.checked ? resetTimeInput.value || null : null),
        parentId: existingTask ? existingTask.parentId : null,
        subtasks: existingSubtasks,
        isInfo: infoCheckbox.checked,
        collapsed: existingTask ? existingTask.collapsed : false,
        color: selectedTaskColor,
        doneColor: infoCheckbox.checked ? null : selectedDoneColor,
        deadline: deadline
      };

      if (existingTask) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É
        const taskIndex = column.tasks.findIndex(t => t.id === existingTask.id);
        if (taskIndex !== -1) {
          column.tasks[taskIndex] = taskData;
        }
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        column.tasks.push(taskData);
      }

      saveData();
      render();
      dialog.close();
    };

    dialog.showModal();

    // –í —Ñ—É–Ω–∫—Ü–∏–∏ openTaskDialog –¥–æ–±–∞–≤–ª—è–µ–º:
    const resizeObserver = new ResizeObserver(() => {
      updateLineNumbers();
    });
    resizeObserver.observe(descriptionInput);
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–±—Ä–æ—Å–∞ –∑–∞–¥–∞—á
  function checkTasksReset() {
    const now = new Date();
    let needsSave = false;

    data.boards.forEach(board => {
      board.columns.forEach(col => {
        col.tasks.forEach(task => {
          if (task.repeating && task.done && task.doneDate) {
            let shouldReset = false;

            if (task.resetTime) {
              // –ë–µ—Ä–µ–º –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–π –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞
              const doneDate = new Date(task.doneDate);
              const [hours, minutes] = task.resetTime.split(':');
              const resetTime = new Date(doneDate);
              resetTime.setHours(hours, minutes, 0, 0);

              // –ï—Å–ª–∏ –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
              if (resetTime <= doneDate) {
                resetTime.setDate(resetTime.getDate() + 1);
              }

              shouldReset = now >= resetTime;
            } else {
              // –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –∑–∞–¥–∞–Ω–æ, —Å–±—Ä–æ—Å –≤ –Ω–∞—á–∞–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
              const doneDate = new Date(task.doneDate);
              const nextDay = new Date(doneDate);
              nextDay.setDate(nextDay.getDate() + 1);
              nextDay.setHours(0, 0, 0, 0);
              shouldReset = now >= nextDay;
            }

            if (shouldReset) {
              task.done = false;
              task.doneDate = null;
              needsSave = true;
              rerenderTask(task.id);
            }
          }
        });
      });
    });

    if (needsSave) {
      saveData();
    }
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  checkTasksReset();
  setInterval(checkTasksReset, 1000);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏–∞–ª–æ–≥–æ–º –∫–æ–ª–æ–Ω–∫–∏
  function openColumnDialog(existingColumn = null) {
    const dialog = document.getElementById('column-dialog');
    const form = dialog.querySelector('form');
    const nameInput = document.getElementById('column-name');
    const submitButton = form.querySelector('button[type="submit"]');
    const titleEl = dialog.querySelector('h3');
    const board = getSelectedBoard();

    if (!board) return;

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
    titleEl.textContent = existingColumn ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É' : '–ù–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞';
    submitButton.textContent = existingColumn ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å';

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–ª–æ–Ω–∫–∏ –∏–ª–∏ –æ—á–∏—â–∞–µ–º
    if (existingColumn) {
      nameInput.value = existingColumn.name;
    } else {
      form.reset();
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
    const deleteBtn = form.querySelector('.delete-btn');
    if (existingColumn) {
      deleteBtn.style.display = 'block';
      deleteBtn.onclick = async () => {
        const confirmed = await showConfirmDialog(
            `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É "${existingColumn.name}" —Å–æ –≤—Å–µ–º–∏ –∑–∞–¥–∞—á–∞–º–∏?`
        );
        if (confirmed) {
          const board = getSelectedBoard();
          const columnIndex = board.columns.findIndex(c => c.id === existingColumn.id);
          if (columnIndex !== -1) {
            board.columns.splice(columnIndex, 1);
            saveData();
            render();
            dialog.close();
          }
        }
      };
    } else {
      deleteBtn.style.display = 'none';
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    form.onsubmit = (e) => {
      e.preventDefault();

      const name = nameInput.value.trim();
      if (!name) return;

      if (existingColumn) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–æ–Ω–∫—É
        existingColumn.name = name;
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
        board.columns.push({
          id: generateId(),
          name: name,
          tasks: []
        });
      }

      saveData();
      render();
      dialog.close();
    };

    dialog.showModal();
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏–∞–ª–æ–≥–æ–º –¥–æ—Å–∫–∏
  function openBoardDialog(existingBoard = null) {
    const dialog = document.getElementById('board-dialog');
    const form = dialog.querySelector('form');
    const nameInput = document.getElementById('board-name');
    const submitButton = form.querySelector('button[type="submit"]');
    const titleEl = dialog.querySelector('h3');

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
    titleEl.textContent = existingBoard ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å–∫—É' : '–ù–æ–≤–∞—è –¥–æ—Å–∫–∞';
    submitButton.textContent = existingBoard ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å';

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–æ—Å–∫–∏ –∏–ª–∏ –æ—á–∏—â–∞–µ–º
    if (existingBoard) {
      nameInput.value = existingBoard.name;
    } else {
      form.reset();
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
    const deleteBtn = form.querySelector('.delete-btn');
    if (existingBoard) {
      deleteBtn.style.display = 'block';
      deleteBtn.onclick = async () => {
        const confirmed = await showConfirmDialog(
            `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–æ—Å–∫—É "${existingBoard.name}" —Å–æ –≤—Å–µ–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏?`
        );
        if (confirmed) {
          const boardIndex = data.boards.findIndex(b => b.id === existingBoard.id);
          if (boardIndex !== -1) {
            data.boards.splice(boardIndex, 1);
            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–æ—Å–∫—É –∏–ª–∏ –ø–µ—Ä–≤—É—é, –µ—Å–ª–∏ —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é
            if (data.boards.length > 0) {
              data.selectedBoardId = data.boards[boardIndex]
                  ? data.boards[boardIndex].id
                  : data.boards[0].id;
            } else {
              data.selectedBoardId = null;
            }
            saveData();
            render();
            dialog.close();
          }
        }
      };
    } else {
      deleteBtn.style.display = 'none';
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    form.onsubmit = (e) => {
      e.preventDefault();

      const name = nameInput.value.trim();
      if (!name) return;

      if (existingBoard) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–æ—Å–∫—É
        existingBoard.name = name;
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–æ—Å–∫—É
        const newBoard = {
          id: generateId(),
          name: name,
          columns: []
        };
        data.boards.push(newBoard);
        data.selectedBoardId = newBoard.id;
      }

      saveData();
      render();
      dialog.close();
    };

    dialog.showModal();
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
  function rerenderTask(taskId) {
    const taskEl = document.querySelector(`div[data-task-id="${taskId}"]`);
    if (!taskEl) return;

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ –¥–∞–Ω–Ω—ã—Ö
    let task = null;
    const board = getSelectedBoard();
    if (!board) return;

    board.columns.forEach(col => {
      const foundTask = col.tasks.find(t => t.id === taskId);
      if (foundTask) task = foundTask;
    });

    if (!task) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    taskEl.className = 'task' + (task.done ? ' done' : '');

    // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å
    const checkbox = taskEl.querySelector('input[type="checkbox"]');
    if (checkbox) checkbox.checked = task.done;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–±—Ä–æ—Å–∞
    const resetInfo = taskEl.querySelector('.task-reset-info');
    if (resetInfo) resetInfo.remove();

    if (task.repeating && task.done) {
      const newResetInfo = document.createElement('div');
      newResetInfo.className = 'task-reset-info';

      if (task.resetTime) {
        newResetInfo.textContent = formatTimeLeft(task.resetTime);
      } else {
        newResetInfo.textContent = formatTimeLeft('00:00');
      }

      taskEl.appendChild(newResetInfo);
    }
  }

  function renderTask(task, container) {
    const taskEl = document.createElement('div');
    taskEl.className = 'task' + (task.done ? ' done' : '') + (task.parentId ? ' subtask' : '') + (task.isInfo ? ' info' : '');

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø—É–ª—å—Å–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ–¥–ª–∞–π–Ω –∏ –æ–Ω —Å–∫–æ—Ä–æ
    if (!task.done && task.deadline) {
      const deadline = new Date(task.deadline);
      const now = new Date();
      const diff = deadline - now;
      const hourInMs = 60 * 60 * 1000;

      if (diff < hourInMs || diff < 0) {
        taskEl.classList.add('deadline-warning');
      }
    }

    taskEl.draggable = true;
    taskEl.dataset.taskId = task.id;

    // –°–æ–∑–¥–∞–µ–º header –∑–∞–¥–∞—á–∏
    const taskHeader = document.createElement('div');
    taskHeader.className = 'task-header';

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞
    const currentColor = task.done && task.doneColor ? task.doneColor : task.color;
    if (currentColor) {
      taskEl.style.borderLeftColor = currentColor;
      taskEl.dataset.customColor = '';

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–≤–µ—Ç–ª–µ–Ω–Ω—ã–π —Ñ–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç
      const alpha = task.done ? '0.1' : '0.05';
      const rgb = hexToRGB(currentColor);
      taskEl.style.setProperty('--task-bg-color', `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${alpha})`);

      if (task.done && task.doneColor) {
        const doneRgb = hexToRGB(task.doneColor);
        taskEl.style.setProperty('--task-done-bg-color', `rgba(${doneRgb.r}, ${doneRgb.g}, ${doneRgb.b}, 0.15)`);
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å
    if (!task.isInfo) {
      const checkbox = document.createElement('input');
      checkbox.type = 'checkbox';
      checkbox.checked = task.done;
      checkbox.onclick = (e) => e.stopPropagation();
      checkbox.onchange = () => {
        task.done = checkbox.checked;
        if (checkbox.checked) {
          task.doneDate = new Date().toISOString();
        } else {
          task.doneDate = null;
        }
        saveData();
        render();
      };
      taskHeader.appendChild(checkbox);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–¥–∞—á–∏
    const taskContent = document.createElement('div');
    taskContent.className = 'task-content';

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    const title = document.createElement('div');
    renderLinkedText(title, task.title, 'task-title');
    taskContent.appendChild(title);

    // –û–ø–∏—Å–∞–Ω–∏–µ
    if (task.description) {
      const descEl = document.createElement('div');
      renderLinkedText(descEl, task.description, 'task-description');
      taskContent.appendChild(descEl);
    }

    taskHeader.appendChild(taskContent);
    taskEl.appendChild(taskHeader);

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–±—Ä–æ—Å–µ
    if (task.repeating) {
      const repeatIcon = document.createElement('div');
      repeatIcon.className = 'task-repeat-icon';
      repeatIcon.innerHTML = 'üîÑ';
      repeatIcon.title = '–ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –∑–∞–¥–∞—á–∞';
      taskEl.appendChild(repeatIcon);
    }

    container.appendChild(taskEl);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–∞–±—Ç–∞—Å–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (task.subtasks && task.subtasks.length > 0) {
      const subtasksContainer = document.createElement('div');
      subtasksContainer.className = 'subtasks-container';

      // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞–∂–¥—ã–π —Å–∞–±—Ç–∞—Å–∫ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
      task.subtasks.forEach(subtaskId => {
        const subtask = findTaskById(subtaskId);
        if (subtask) {
          renderTask(subtask, subtasksContainer);
        }
      });

      taskEl.appendChild(subtasksContainer);
    }

    // –í —Ñ—É–Ω–∫—Ü–∏–∏ renderTask, –≥–¥–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏
    const timeIndicators = document.createElement('div');
    timeIndicators.className = 'task-time-indicators';

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if (task.done && task.doneDate) {
      const doneTime = document.createElement('div');
      doneTime.className = 'task-done-time';
      doneTime.textContent = `‚úì ${formatDateTime(task.doneDate)}`;
      timeIndicators.appendChild(doneTime);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–¥–ª–∞–π–Ω–µ
    if (task.deadline) {
      const deadlineInfo = document.createElement('div');
      deadlineInfo.className = 'task-deadline-info';
      const now = new Date();
      const deadline = new Date(task.deadline);

      if (!task.done) {
        // –î–ª—è –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        if (deadline <= now) {
          deadlineInfo.classList.add('overdue');
        }

        const updateTime = () => {
          deadlineInfo.textContent = `‚åõÔ∏è ${formatDeadlineTime(deadline)}`;
        };

        updateTime();
        const intervalId = setInterval(updateTime, 1000);
        resetTimeIntervals.set(task.id, intervalId);
      } else {
        // –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞
        deadlineInfo.textContent = `‚åõÔ∏è ${formatDateTime(deadline)}`;
      }

      timeIndicators.appendChild(deadlineInfo);
    }
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–±—Ä–æ—Å–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á
    else if (task.repeating && task.done) {
      const resetInfo = document.createElement('div');
      resetInfo.className = 'task-reset-info';

      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
      if (resetTimeIntervals.has(task.id)) {
        clearInterval(resetTimeIntervals.get(task.id));
      }

      const updateTime = () => {
        resetInfo.textContent = formatTimeLeft(task.resetTime || '00:00');
      };

      updateTime();
      const intervalId = setInterval(updateTime, 1000);
      resetTimeIntervals.set(task.id, intervalId);

      timeIndicators.appendChild(resetInfo);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    if (timeIndicators.children.length > 0) {
      taskEl.appendChild(timeIndicators);
    }


    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∞–±—Ç–∞—Å–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
    if (task.subtasks && task.subtasks.length > 0) {
      const expandToggle = document.createElement('div'); // –º–µ–Ω—è–µ–º span –Ω–∞ div
      expandToggle.className = 'task-expand-toggle';
      if (task.collapsed) {
        expandToggle.classList.add('collapsed');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ –≥—Ä–∏–¥–∞
      const spacerLeft = document.createElement('div');
      expandToggle.appendChild(spacerLeft);

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç—Ä–µ–ª–∫–∏
      const toggleArrow = document.createElement('span');
      toggleArrow.className = 'toggle-arrow';
      expandToggle.appendChild(toggleArrow);

      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = getSubtasksStats(task);
      if (stats.total > 0) {
        const statsEl = document.createElement('div');
        statsEl.className = 'subtasks-stats';
        statsEl.innerHTML = `
          <span class="stats-done">${stats.done}</span>
          <span class="stats-separator">/</span>
          <span class="stats-total">${stats.total}</span>
        `;
        expandToggle.appendChild(statsEl);
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ç—Ä–µ—Ç—å–µ–π –∫–æ–ª–æ–Ω–∫–∏ –≥—Ä–∏–¥–∞
        const spacerRight = document.createElement('div');
        expandToggle.appendChild(spacerRight);
      }

      expandToggle.onclick = (e) => {
        e.stopPropagation();
        const subtasksContainer = taskEl.querySelector('.subtasks-container');
        if (subtasksContainer) {
          const isExpanded = !expandToggle.classList.contains('collapsed');
          expandToggle.classList.toggle('collapsed');
          subtasksContainer.style.display = isExpanded ? 'none' : 'block';

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          task.collapsed = isExpanded;
          saveData();
        }
      };
      taskEl.appendChild(expandToggle);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å–∞–±—Ç–∞—Å–∫–æ–≤
      const subtasksContainer = taskEl.querySelector('.subtasks-container');
      if (subtasksContainer && task.collapsed) {
        subtasksContainer.style.display = 'none';
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
    addTaskDragHandlers(taskEl);
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  async function showConfirmDialog(message) {
    const dialog = document.getElementById('confirm-dialog');
    const messageEl = dialog.querySelector('#confirm-message');
    messageEl.textContent = message;

    dialog.showModal();

    return new Promise((resolve) => {
      dialog.addEventListener('close', () => {
        resolve(dialog.returnValue === 'confirm');
      }, { once: true });
    });
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  const sidebarToggle = document.getElementById('sidebar-toggle');
  const sidebar = document.getElementById('sidebar');

  // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è —Ñ–æ–Ω–∞
  const backdrop = document.createElement('div');
  backdrop.className = 'sidebar-backdrop';
  document.body.appendChild(backdrop);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
  sidebarToggle.addEventListener('click', () => {
    document.body.classList.toggle('sidebar-open');
    sidebar.classList.toggle('open');
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—é
  backdrop.addEventListener('click', () => {
    document.body.classList.remove('sidebar-open');
    sidebar.classList.remove('open');
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–æ—Å–∫–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
  boardsEl.addEventListener('click', (e) => {
    if (window.innerWidth <= 768) {
      document.body.classList.remove('sidebar-open');
      sidebar.classList.remove('open');
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏
  async function insertLink() {
    const dialog = document.getElementById('link-dialog');
    const form = dialog.querySelector('form');
    const urlInput = document.getElementById('link-url');
    const textInput = document.getElementById('link-text');
    const description = document.getElementById('task-description');

    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    form.reset();

    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏
    const selectedText = description.value.substring(
        description.selectionStart,
        description.selectionEnd
    );
    if (selectedText) {
      textInput.value = selectedText;
    }

    dialog.showModal();

    // –ñ–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞
    const closePromise = new Promise(resolve => {
      dialog.addEventListener('close', () => resolve(dialog.returnValue), { once: true });
    });

    form.onsubmit = (e) => {
      e.preventDefault();
      dialog.close('submit');
    };

    const result = await closePromise;
    if (result === 'submit') {
      const url = urlInput.value;
      const text = textInput.value || url;
      const link = `[${text}](${url})`;

      // –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ —Ç–µ–∫—Å—Ç
      const start = description.selectionStart;
      const end = description.selectionEnd;
      description.value =
          description.value.substring(0, start) +
          link +
          description.value.substring(end);
    }
  }

  // –§—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–∫—Ä–∏–ø—Ç–∞, –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
  function formatDescription(text) {
    // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Markdown-—Å—Å—ã–ª–∫–∏ [text](url)
    let formatted = text.replace(
        /\[([^\]]+)\]\(([^)]+)\)/g,
        '<a href="$2" target="_blank" rel="noopener noreferrer">$1</a>'
    );

    // –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ URL, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤ —Ç–µ–≥–∞—Ö <a>
    formatted = formatted.replace(
        /(?<!["=])(https?:\/\/[^\s<]+)/g,
        '<a href="$1" target="_blank" rel="noopener noreferrer">$1</a>'
    );

    return formatted;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ —Å —Å—Å—ã–ª–∫–∞–º–∏
  function renderLinkedText(container, text, className = '') {
    container.className = className;
    container.innerHTML = formatDescription(text);
  }

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∞–±—Ç–∞—Å–∫–∞–º–∏
  function findTaskById(taskId) {
    const board = getSelectedBoard();
    if (!board) {
      return null;
    }

    // –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∑–∞–¥–∞—á
    const allTasks = [];

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
    for (const column of board.columns) {
      for (const task of column.tasks) {
        allTasks.push(task);
        if (task.subtasks && task.subtasks.length > 0) {
          collectSubtasks(task, allTasks);
        }
      }
    }

    return allTasks.find(task => task.id === taskId);
  }

  function collectSubtasks(parentTask, tasksArray) {
    if (!parentTask.subtasks) return;

    for (const subtaskId of parentTask.subtasks) {
      // –ò—â–µ–º —Å–∞–±—Ç–∞—Å–∫ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –º–∞—Å—Å–∏–≤–µ –∑–∞–¥–∞—á
      const subtask = tasksArray.find(t => t.id === subtaskId);
      if (subtask) {
        if (!tasksArray.includes(subtask)) {
          tasksArray.push(subtask);
        }
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º —Å–∞–±—Ç–∞—Å–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–∞–±—Ç–∞—Å–∫–∞
        if (subtask.subtasks && subtask.subtasks.length > 0) {
          collectSubtasks(subtask, tasksArray);
        }
      }
    }
  }

  function makeSubtask(taskId, parentId) {
    const board = getSelectedBoard();
    if (!board) {
      return;
    }

    const task = findTaskById(taskId);
    const parentTask = findTaskById(parentId);
    if (!task || !parentTask) {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if (isTaskAncestor(taskId, parentId)) {
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–µ–π
    const parentColumn = board.columns.find(col =>
        col.tasks.some(t => t.id === parentId)
    );

    if (!parentColumn) {
      return;
    }

    // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–∞
    removeTaskFromCurrentPosition(task);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    task.parentId = parentId;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ subtasks –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!parentTask.subtasks) {
      parentTask.subtasks = [];
    }

    // –î–æ–±–∞–≤–ª—è–µ–º ID –∑–∞–¥–∞—á–∏ –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–µ
    if (!parentTask.subtasks.includes(task.id)) {
      parentTask.subtasks.push(task.id);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Ç—É –∂–µ –∫–æ–ª–æ–Ω–∫—É, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞
    const taskIndex = parentColumn.tasks.findIndex(t => t.id === parentId);
    if (taskIndex !== -1) {
      // –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏
      parentColumn.tasks.splice(taskIndex + 1, 0, task);
    } else {
      // –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
      parentColumn.tasks.push(task);
    }

    // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é –¥–æ—Å–∫—É
    const boardIndex = data.boards.findIndex(b => b.id === board.id);
    if (boardIndex !== -1) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å–∫–∏
      data.boards[boardIndex] = board;
    }

    saveData();
    render();
  }

  function isTaskAncestor(taskId, possibleAncestorId) {
    const task = findTaskById(taskId);
    if (!task || !task.parentId) return false;
    if (task.parentId === possibleAncestorId) return true;
    return isTaskAncestor(task.parentId, possibleAncestorId);
  }

  function removeTaskFromCurrentPosition(task) {
    if (!task) {
      return;
    }

    const board = getSelectedBoard();
    if (!board) {
      return;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ —Å–∞–±—Ç–∞—Å–∫, —É–¥–∞–ª—è–µ–º –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—è
    if (task.parentId) {
      const parentTask = findTaskById(task.parentId);

      if (parentTask && parentTask.subtasks) {
        parentTask.subtasks = parentTask.subtasks.filter(id => id !== task.id);
      }
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–ª–æ–Ω–∫–∏
    for (const column of board.columns) {
      const index = column.tasks.findIndex(t => t.id === task.id);
      if (index !== -1) {
        column.tasks.splice(index, 1);
        break;
      }
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  let isProcessingDrop = false;

  function addTaskDragHandlers(taskEl) {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    taskEl.addEventListener('dragstart', (e) => {
      e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–ª–∞—Å—å –∫–æ–ª–æ–Ω–∫–∞
      taskEl.classList.add('dragging');
      document.body.classList.add('dragging');
      if (e.dataTransfer) {
        e.dataTransfer.setData('text/plain', taskEl.dataset.taskId);
      } else if (e.detail?.dataTransfer) {
        e.detail.dataTransfer.setData('text/plain', taskEl.dataset.taskId);
      }
    });

    taskEl.addEventListener('dragend', (e) => {
      e.stopPropagation();
      taskEl.classList.remove('dragging');
      document.body.classList.remove('dragging');
      removeAllDropIndicators();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ dragover —Å –ª–æ–≥–∏–∫–æ–π —Ç—Ä–µ—Ç–µ–π
    taskEl.addEventListener('dragover', (e) => {
      const draggingTask = document.querySelector('.task.dragging');
      if (!draggingTask) return;
      showTaskDropIndicator(e, taskEl, draggingTask);
    });

    taskEl.addEventListener('drop', (e) => {
      handleTaskDrop(e, taskEl);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    taskEl.addEventListener('dblclick', (e) => {
      e.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è

      const task = findTaskById(taskEl.dataset.taskId);
      if (task) {
        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞–¥–∞—á–∞ (–∏–ª–∏ –µ—ë —Ä–æ–¥–∏—Ç–µ–ª—å, –µ—Å–ª–∏ —ç—Ç–æ —Å–∞–±—Ç–∞—Å–∫)
        const column = getSelectedBoard().columns.find(col => {
          return col.tasks.some(t => {
            if (t.id === task.id) return true; // –°–∞–º–∞ –∑–∞–¥–∞—á–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ
            return !!(task.parentId && t.id === task.parentId);
          });
        });

        if (column) {
          openTaskDialog(column, task);
        }
      }
    });
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –¥–æ –∑–∞–¥–∞—á–∏
  function getTaskPath(task) {
    const path = [];
    let currentTask = task;

    // –°–æ–±–∏—Ä–∞–µ–º –ø—É—Ç—å –æ—Ç —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ –¥–æ –∫–æ—Ä–Ω–µ–≤–æ–π
    while (currentTask && currentTask.parentId) {
      const parentTask = findTaskById(currentTask.parentId);
      if (parentTask) {
        path.unshift(parentTask.title);
        currentTask = parentTask;
      } else {
        break;
      }
    }

    return path;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–ª–æ–Ω–∫–∏
  function getColumnStats(column) {
    let done = 0;
    let total = 0;

    function countTasks(tasks) {
      tasks.forEach(task => {
        if (!task.isInfo && task.parentId === null) { // –ù–µ —É—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
          total++;
          if (task.done) done++;
        }
      });
    }
    countTasks(column.tasks);
    return { done, total };
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
  function handleTaskDrop(e, container) {
    if (isProcessingDrop) return;

    const draggingTask = document.querySelector('.task.dragging');
    if (!draggingTask) return;

    e.preventDefault();
    e.stopPropagation();
    isProcessingDrop = true;

    try {
      let draggedTaskId;
      if (e.dataTransfer) {
        draggedTaskId = e.dataTransfer.getData('text/plain');
      } else if (e.detail?.dataTransfer) {
        draggedTaskId = e.detail.dataTransfer.getData('text/plain');
      } else {
        draggedTaskId = draggingTask.dataset.transferData;
      }
      if (!draggedTaskId) return;

      const board = getSelectedBoard();

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ —Ü–µ–ª–∏
      const isColumn = container.classList.contains('column');
      const targetTask = container.classList.contains('task') ? container : null;

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–æ–Ω–∫—É
      const colEl = isColumn ? container : container.closest('.column');
      const columnId = colEl.dataset.columnId;
      const column = board.columns.find(col => col.id === columnId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
      const subtaskIndicator = targetTask?.querySelector('.subtask-drop-indicator');
      const taskIndicator = colEl.querySelector('.task-drop-indicator');
      const parentTaskEl = taskIndicator?.closest('.task');

      if (subtaskIndicator && targetTask) {
        // –°–ª—É—á–∞–π 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–±—Ç–∞—Å–∫–∞
        makeSubtask(draggedTaskId, targetTask.dataset.taskId);
      } else if (taskIndicator && parentTaskEl) {
        // –°–ª—É—á–∞–π 2: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —Å–ø–∏—Å–∫–∞ —Å–∞–±—Ç–∞—Å–∫–æ–≤
        const draggedTask = findTaskById(draggedTaskId);
        const parentTask = findTaskById(parentTaskEl.dataset.taskId);
        const tasks = parentTask.subtasks;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤—Å—Ç–∞–≤–∫–∏
        const prevTask = taskIndicator.previousElementSibling;
        const nextTask = taskIndicator.nextElementSibling;
        const currentIndex = tasks.findIndex(task => task === draggedTaskId);
        const prevIndex = prevTask?.dataset ? tasks.findIndex(task => task === prevTask.dataset.taskId) : -1;
        const nextIndex = nextTask?.dataset ? tasks.findIndex(task => task === nextTask.dataset.taskId) : -1;

        if ((nextIndex === currentIndex || prevIndex === currentIndex) && currentIndex !== -1) return;

        let finalIndex = nextTask ? nextIndex : tasks.length;
        if (currentIndex !== -1) {
          finalIndex = currentIndex < finalIndex ? finalIndex - 1 : finalIndex;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        removeTaskFromCurrentPosition(draggedTask);
        column.tasks.push(draggedTask);
        draggedTask.parentId = parentTask.id;
        parentTask.subtasks.splice(finalIndex, 0, draggedTaskId);

        saveData();
        render();
      } else if (taskIndicator) {
        // –°–ª—É—á–∞–π 3: –û–±—ã—á–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –∫–æ–ª–æ–Ω–∫—É
        const tasks = column.tasks;

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –Ω–∞—Ö–æ–¥–∏–º –µ–≥–æ –ø–æ–∑–∏—Ü–∏—é —Å—Ä–µ–¥–∏ –∑–∞–¥–∞—á
        const nextTask = taskIndicator.nextElementSibling;
        const prevTask = taskIndicator.previousElementSibling;
        let prevIndex = prevTask && prevTask.dataset ? tasks.findIndex(task => task.id === prevTask.dataset.taskId) : -1;
        let nextIndex = nextTask && nextTask.dataset ? tasks.findIndex(task => task.id === nextTask.dataset.taskId) : -1;
        let currentIndex = tasks.findIndex(task => task.id === draggingTask.dataset.taskId);

        // –ï—Å–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å —Ç–µ–∫—É—â–∏–º —Ç–∞—Å–∫–æ–º, —Ç–æ –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞–µ–º
        if ((nextIndex === currentIndex || prevIndex === currentIndex) && currentIndex !== -1) return;

        // —É—á–µ—Å—Ç—å, –µ—Å–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–π —Ç–∞—Å–∫ —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–ª–æ–Ω–∫–µ
        let finalIndex = nextTask ? nextIndex : tasks.length;
        if (currentIndex !== -1) {
          finalIndex = currentIndex < finalIndex ? finalIndex - 1 : finalIndex;
        }

        moveTaskToColumn(draggedTaskId, columnId, finalIndex);
      }
    } finally {
      isProcessingDrop = false;
      removeAllDropIndicators();
    }
  }

  function handleColumnDrop(e) {
    if (isProcessingDrop) return;
    const draggingCol = document.querySelector('.column.dragging');
    if (!draggingCol) return;

    e.preventDefault();
    e.stopPropagation();
    isProcessingDrop = true;

    try {
      let draggedColId;
      if (e.dataTransfer) {
        draggedColId = e.dataTransfer.getData('text/plain');
      } else if (e.detail?.dataTransfer) {
        draggedColId = e.detail.dataTransfer.getData('text/plain');
      } else {
        draggedColId = draggingCol.dataset.transferData;
      }
      if (!draggedColId) return;

      const board = getSelectedBoard();
      const currentIndex = board.columns.findIndex(col => col.id === draggedColId);

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
      const indicator = document.querySelector('.column-drop-indicator');
      if (!indicator) return;

      const nextCol = indicator.nextElementSibling;
      const nextColIndex = nextCol ? board.columns.findIndex(col => col.id === nextCol.dataset.columnId) : -1;

      let finalIndex = nextCol ? nextColIndex : board.columns.length;
      if (currentIndex !== -1) {
        finalIndex = currentIndex < finalIndex ? finalIndex - 1 : finalIndex;
      }

      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –≤ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
      if (finalIndex !== -1) {
        const [movedColumn] = board.columns.splice(currentIndex, 1);
        board.columns.splice(finalIndex, 0, movedColumn);
        saveData();
        render();
      }
    } finally {
      isProcessingDrop = false;
      removeAllDropIndicators();
    }
  }

  function showColumnDropIndicator(e, draggingCol) {
    e.preventDefault();
    e.stopPropagation();
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    removeAllDropIndicators();

    const indicator = document.createElement('div');
    indicator.className = 'column-drop-indicator';

    // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é –∫–æ–ª–æ–Ω–∫—É –∫ –∫—É—Ä—Å–æ—Ä—É
    const columns = Array.from(document.querySelectorAll('#columns > .column'));
    const mouseX = e.detail?.clientX || e.clientX;
    let closestColumn = null;
    let minDistance = Infinity;

    columns.forEach(col => {
      if (col === draggingCol) return;
      const rect = col.getBoundingClientRect();
      const colMiddle = rect.left + rect.width / 2;
      const distance = Math.abs(mouseX - colMiddle);

      if (distance < minDistance) {
        minDistance = distance;
        closestColumn = col;
      }
    });

    const columnsContainer = document.getElementById('columns');
    if (closestColumn) {
      const rect = closestColumn.getBoundingClientRect();
      if (mouseX < rect.left + rect.width / 2) {
        columnsContainer.insertBefore(indicator, closestColumn);
      } else {
        const nextColumn = closestColumn.nextElementSibling;
        if (nextColumn) {
          columnsContainer.insertBefore(indicator, nextColumn);
        } else {
          columnsContainer.appendChild(indicator);
        }
      }
    } else {
      columnsContainer.appendChild(indicator);
    }
  }

  function showTaskDropIndicator(e, parentEl, draggingTask) {
    if (parentEl === draggingTask) return;
    e.preventDefault();
    e.stopPropagation();

    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    removeAllDropIndicators();

    const indicator = document.createElement('div');
    indicator.className = 'task-drop-indicator';

    // –ï—Å–ª–∏ parentEl - —Ç–∞—Å–∫
    if (parentEl.classList.contains('task')) {
      const taskEl = parentEl;

      const taskRect = taskEl.getBoundingClientRect();
      const partHeight = taskRect.height / 4;
      const mouseY = (e.detail?.clientY || e.clientY) - taskRect.top;

      const subtasksContainer = taskEl.querySelector('.subtasks-container');
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–∞–±—Ç–∞—Å–∫–æ–≤ - –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞–¥ –Ω–∏–º
      let aboveSubtasksContainer = false;
      if (subtasksContainer) {
        const subtasksContainerRect = subtasksContainer.getBoundingClientRect();
        if (e.clientY > subtasksContainerRect.top && e.clientY < subtasksContainerRect.bottom) {
          aboveSubtasksContainer = true;
        }
      }
      if (subtasksContainer && aboveSubtasksContainer) {
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤—Å—Ç–∞–≤–∫–∏
        const indicator = document.createElement('div');
        indicator.className = 'task-drop-indicator';
        // –í—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –ø–æ–∑–∏—Ü–∏—é –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é –∑–∞–¥–∞—á—É –∫ –∫—É—Ä—Å–æ—Ä—É
        let closestTask = null;
        let minDistance = Infinity;

        subtasksContainer.childNodes.forEach(node => {
          if (node.nodeType === 1) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç
            const rect = node.getBoundingClientRect();
            const distance = Math.abs(e.clientY - rect.top);
            if (distance < minDistance) {
              closestTask = node;
              minDistance = distance;
            }
          }
        });

        if (closestTask) {
          subtasksContainer.insertBefore(indicator, closestTask);
        } else {
          subtasksContainer.appendChild(indicator);
        }
      } else if (mouseY > partHeight && mouseY < (partHeight * 3)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫—É—Ä—Å–æ—Ä –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏
        // –ï—Å–ª–∏ —É –∑–∞–¥–∞—á–∏ –µ—â–µ –Ω–µ—Ç —Å–∞–±—Ç–∞—Å–∫–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–±—Ç–∞—Å–∫–∞
        const indicator = document.createElement('div');
        indicator.className = 'subtask-drop-indicator';
        taskEl.appendChild(indicator);
      } else {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        const indicator = document.createElement('div');
        indicator.className = 'task-drop-indicator';

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –≤—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        if (mouseY < partHeight) {
          taskEl.parentNode.insertBefore(indicator, taskEl);
        } else {
          taskEl.parentNode.insertBefore(indicator, taskEl.nextSibling);
        }
      }
    } else if (parentEl.classList.contains('column')) {
      const colEl = parentEl;
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –≤ –∫–æ–ª–æ–Ω–∫–µ
      const tasks = Array.from(colEl.querySelectorAll('.task:not(.subtask)'));
      const addTaskBtn = colEl.querySelector('.add-btn');

      // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π
      if (tasks.length === 0) {
        // –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        colEl.insertBefore(indicator, addTaskBtn);
        return;
      }

      // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é –∑–∞–¥–∞—á—É –∫ –∫—É—Ä—Å–æ—Ä—É
      const mouseY = e.clientY;
      let closestTask = null;
      let minDistance = Infinity;

      tasks.forEach(task => {
        const rect = task.getBoundingClientRect();
        const taskMiddle = rect.top + rect.height / 2;
        const distance = Math.abs(mouseY - taskMiddle);

        if (distance < minDistance) {
          minDistance = distance;
          closestTask = task;
        }
      });

      if (closestTask) {
        const rect = closestTask.getBoundingClientRect();
        if (mouseY < rect.top + rect.height / 2) {
          colEl.insertBefore(indicator, closestTask);
        } else {
          colEl.insertBefore(indicator, closestTask.nextSibling);
        }
      } else {
        colEl.insertBefore(indicator, addTaskBtn);
      }
    }
  }

  function removeAllDropIndicators() {
    document.querySelectorAll('.subtask-drop-indicator').forEach(el => el.remove());
    document.querySelectorAll('.task-drop-indicator').forEach(el => el.remove());
    document.querySelectorAll('.column-drop-indicator').forEach(el => el.remove());
  }

  function hexToRGB(hex) {
    if (!hex) return { r: 0, g: 0, b: 0 };
    // –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –µ—Å—Ç—å
    hex = hex.replace('#', '');

    // –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏—è RGB
    const r = parseInt(hex.substring(0, 2), 16);
    const g = parseInt(hex.substring(2, 4), 16);
    const b = parseInt(hex.substring(4, 6), 16);

    return { r, g, b };
  }

  function updateLineNumbers() {
    const textarea = document.getElementById('task-description');
    const lineNumbers = textarea.closest('.description-container').querySelector('.line-numbers');

    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–∞–º
    const lines = textarea.value.split('\n');

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –Ω–æ–º–µ—Ä–æ–≤, –≥–¥–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ —Å—á–∏—Ç–∞–µ–º –µ—ë –≤–∏–∑—É–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É
    const numbers = [];
    const tempDiv = document.createElement('div');
    tempDiv.style.cssText = `
      position: absolute;
      visibility: hidden;
      white-space: pre-wrap;
      word-wrap: break-word;
      width: ${textarea.clientWidth}px;
      font-family: ${getComputedStyle(textarea).fontFamily};
      font-size: ${getComputedStyle(textarea).fontSize};
      line-height: ${getComputedStyle(textarea).lineHeight};
      padding: ${getComputedStyle(textarea).padding};
    `;
    document.body.appendChild(tempDiv);

    let lineNumber = 1;
    lines.forEach(line => {
      // –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –∑–∞–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞
      tempDiv.textContent = line;
      const lineHeight = parseInt(getComputedStyle(textarea).lineHeight);
      const visualLines = Math.ceil(tempDiv.clientHeight / lineHeight);

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
      numbers.push(lineNumber);
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      for (let i = 2; i < visualLines; i++) {
        numbers.push('');
      }
      lineNumber++;
    });

    document.body.removeChild(tempDiv);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    lineNumbers.textContent = numbers.join('\n');

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—ã—Å–æ—Ç—É
    //lineNumbers.style.height = `${textarea.scrollHeight}px`;

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª
    lineNumbers.scrollTop = textarea.scrollTop;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  const exportBtn = document.getElementById('export-btn');
  const importBtn = document.getElementById('import-btn');
  const importFile = document.getElementById('import-file');

  // –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
  exportBtn.addEventListener('click', () => {
    const dataStr = JSON.stringify(data, null, 2);
    const blob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(blob);

    const a = document.createElement('a');
    a.href = url;
    a.download = `taskboard-backup-${new Date().toISOString().slice(0,10)}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  });

  // –§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
  importBtn.addEventListener('click', () => {
    importFile.click();
  });

  importFile.addEventListener('change', (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = async (e) => {
      try {
        const importedData = JSON.parse(e.target.result);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        if (!importedData.boards || !Array.isArray(importedData.boards)) {
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
        }

        const confirmed = await showConfirmDialog(
            '–ò–º–ø–æ—Ä—Ç –∑–∞–º–µ–Ω–∏—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?'
        );

        if (confirmed) {
          data = importedData;
          saveData();
          render();
        }
      } catch (err) {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞: ' + err.message);
      }
      // –û—á–∏—â–∞–µ–º input –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞
      importFile.value = '';
    };
    reader.readAsText(file);
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  function renderCalendar() {
    const mainCalendar = document.querySelector('.main-calendar');
    const prevMonthCal = document.querySelector('.mini-calendar.prev-month');
    const nextMonthCal = document.querySelector('.mini-calendar.next-month');

    // –û—á–∏—â–∞–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    mainCalendar.innerHTML = '<div class="calendar-grid"></div>';

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    document.getElementById('current-month').textContent = currentDate.toLocaleString('ru', {
      month: 'long',
      year: 'numeric'
    }).replace(/^./, str => str.toUpperCase());

    // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—ã –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–µ–≤
    const prevMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);
    const nextMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –º–∏–Ω–∏-–∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π
    prevMonthCal.querySelector('h4').textContent = prevMonth.toLocaleString('ru', {
      month: 'long',
      year: 'numeric'
    }).replace(/^./, str => str.toUpperCase());

    nextMonthCal.querySelector('h4').textContent = nextMonth.toLocaleString('ru', {
      month: 'long',
      year: 'numeric'
    }).replace(/^./, str => str.toUpperCase());

    // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä–∏
    renderMonth(mainCalendar.querySelector('.calendar-grid'), currentDate, true);
    renderMonth(prevMonthCal.querySelector('.calendar-grid'), prevMonth, false);
    renderMonth(nextMonthCal.querySelector('.calendar-grid'), nextMonth, false);
  }

  function renderMonth(container, date, isMainCalendar) {
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º grid-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    const calendarGrid = container.querySelector('.calendar-grid') || container;
    calendarGrid.innerHTML = '';

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    const days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
    days.forEach(day => {
      const dayHeader = document.createElement('div');
      dayHeader.className = 'calendar-day-header';
      dayHeader.textContent = day;
      calendarGrid.appendChild(dayHeader);
    });

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const lastDayPrev = new Date(date.getFullYear(), date.getMonth(), 0);

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    let firstDayWeek = firstDay.getDay() - 1;
    if (firstDayWeek === -1) firstDayWeek = 6;

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    for (let i = firstDayWeek - 1; i >= 0; i--) {
      const day = lastDayPrev.getDate() - i;
      addDayToCalendar(calendarGrid, day, true, new Date(date.getFullYear(), date.getMonth() - 1, day), isMainCalendar);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);
    for (let i = 1; i <= lastDay.getDate(); i++) {
      addDayToCalendar(calendarGrid, i, false, new Date(date.getFullYear(), date.getMonth(), i), isMainCalendar);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const remainingDays = 42 - (firstDayWeek + lastDay.getDate());
    for (let i = 1; i <= remainingDays; i++) {
      addDayToCalendar(calendarGrid, i, true, new Date(date.getFullYear(), date.getMonth() + 1, i), isMainCalendar);
    }
  }

  function addDayToCalendar(container, dayNum, isOtherMonth, fullDate, isMainCalendar) {
    const dayEl = document.createElement('div');
    dayEl.className = 'calendar-day' + (isOtherMonth ? ' other-month' : '');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º
    const today = new Date();
    if (fullDate.toDateString() === today.toDateString()) {
      dayEl.classList.add('today');
    }

    if (isMainCalendar) {
      dayEl.addEventListener('click', (e) => {
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –¥–Ω–µ–π
        document.querySelectorAll('.calendar-day').forEach(day => {
          day.classList.remove('selected');
          // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–ø–∏—Å–∫–∏ –∑–∞–¥–∞—á
          const taskList = day.querySelector('.task-list');
          if (taskList) {
            taskList.style.display = 'none';
          }
        });

        // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        dayEl.classList.add('selected');
        const taskList = dayEl.querySelector('.task-list');
        if (taskList) {
          taskList.style.display = 'block';
        }
        e.stopPropagation();
      });
    }

    const dateEl = document.createElement('div');
    dateEl.className = 'date';
    dateEl.textContent = dayNum;
    dayEl.appendChild(dateEl);

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
    const tasks = getTasksForDate(fullDate);
    if (tasks.length > 0) {
      const markers = document.createElement('div');
      markers.className = 'task-markers';

      tasks.forEach(task => {
        const marker = document.createElement('div');
        marker.className = 'task-marker' +
            (task.done ? ' done' : '') +
            (!task.done && new Date(task.deadline) < today ? ' overdue' : '');

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ü–≤–µ—Ç–æ–º –∑–∞–¥–∞—á–∏
        const currentColor = (task.done && task.doneColor ? task.doneColor : task.color) || task.info && defaultTaskColors.info || task.done && defaultTaskColors.done || defaultTaskColors.pending;
        if (currentColor) {
          marker.style.background = currentColor;
        }

        markers.appendChild(marker);
      });

      dayEl.appendChild(markers);

      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
      if (isMainCalendar) {
        const taskList = document.createElement('div');
        taskList.className = 'task-list';

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        const taskListContent = document.createElement('div');
        taskListContent.className = 'task-list-content';

        tasks.forEach(task => {
          // –°–æ–∑–¥–∞–µ–º –∫–ª–æ–Ω —Ñ—É–Ω–∫—Ü–∏–∏ renderTask –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
          const taskEl = document.createElement('div');
          taskEl.className = 'task' + (task.done ? ' done' : '') + (task.isInfo ? ' info' : '');

          // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø—É–ª—å—Å–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ–¥–ª–∞–π–Ω –∏ –æ–Ω —Å–∫–æ—Ä–æ
          if (!task.done && task.deadline) {
            const deadline = new Date(task.deadline);
            const diff = deadline - today;
            const hourInMs = 60 * 60 * 1000;

            if (diff < hourInMs || diff < 0) {
              taskEl.classList.add('deadline-warning');
            }
          }

          // –°–æ–∑–¥–∞–µ–º header –∑–∞–¥–∞—á–∏
          const taskHeader = document.createElement('div');
          taskHeader.className = 'task-header';

          // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞
          const currentColor = task.done && task.doneColor ? task.doneColor : task.color;
          if (currentColor) {
            taskEl.style.borderLeftColor = currentColor;
            taskEl.dataset.customColor = '';

            const alpha = task.done ? '0.1' : '0.05';
            const rgb = hexToRGB(currentColor);
            taskEl.style.setProperty('--task-bg-color', `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${alpha})`);

            if (task.done && task.doneColor) {
              const doneRgb = hexToRGB(task.doneColor);
              taskEl.style.setProperty('--task-done-bg-color', `rgba(${doneRgb.r}, ${doneRgb.g}, ${doneRgb.b}, 0.15)`);
            }
          }

          // –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å
          if (!task.isInfo) {
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.checked = task.done;
            checkbox.onclick = (e) => {
              e.stopPropagation();
              task.done = checkbox.checked;
              if (checkbox.checked) {
                task.doneDate = new Date().toISOString();
              } else {
                task.doneDate = null;
              }
              saveData();
              render();
            };
            taskHeader.appendChild(checkbox);
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–¥–∞—á–∏
          const taskContent = document.createElement('div');
          taskContent.className = 'task-content';

          // –ó–∞–≥–æ–ª–æ–≤–æ–∫
          const title = document.createElement('div');
          renderLinkedText(title, task.title, 'task-title');
          taskContent.appendChild(title);

          // –û–ø–∏—Å–∞–Ω–∏–µ
          if (task.description) {
            const descEl = document.createElement('div');
            renderLinkedText(descEl, task.description, 'task-description');
            taskContent.appendChild(descEl);
          }

          taskHeader.appendChild(taskContent);
          taskEl.appendChild(taskHeader);

          // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
          if (task.repeating) {
            const repeatIcon = document.createElement('div');
            repeatIcon.className = 'task-repeat-icon';
            repeatIcon.innerHTML = 'üîÑ';
            repeatIcon.title = '–ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –∑–∞–¥–∞—á–∞';
            taskEl.appendChild(repeatIcon);
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏
          const timeIndicators = document.createElement('div');
          timeIndicators.className = 'task-time-indicators';

          // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
          if (task.done && task.doneDate) {
            const doneTime = document.createElement('div');
            doneTime.className = 'task-done-time';
            doneTime.textContent = `‚úì ${formatDateTime(task.doneDate)}`;
            timeIndicators.appendChild(doneTime);
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–¥–ª–∞–π–Ω–µ
          if (task.deadline) {
            const deadlineInfo = document.createElement('div');
            deadlineInfo.className = 'task-deadline-info';
            const now = new Date();
            const deadline = new Date(task.deadline);

            if (!task.done) {
              // –î–ª—è –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
              if (deadline <= now) {
                deadlineInfo.classList.add('overdue');
              }
              deadlineInfo.textContent = `‚åõÔ∏è ${formatDeadlineTime(deadline)}`;
            } else {
              // –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞
              deadlineInfo.textContent = `‚åõÔ∏è ${formatDateTime(deadline)}`;
            }

            timeIndicators.appendChild(deadlineInfo);
          }
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–±—Ä–æ—Å–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á
          else if (task.repeating && task.done) {
            const resetInfo = document.createElement('div');
            resetInfo.className = 'task-reset-info';
            resetInfo.textContent = formatTimeLeft(task.resetTime || '00:00');
            timeIndicators.appendChild(resetInfo);
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
          if (timeIndicators.children.length > 0) {
            taskEl.appendChild(timeIndicators);
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏
          taskEl.onclick = (e) => {
            e.stopPropagation();
            openTaskFromCalendar(task);
          };

          taskListContent.appendChild(taskEl);
        });

        taskList.appendChild(taskListContent);
        dayEl.appendChild(taskList);
      }
    }

    container.appendChild(dayEl);
  }

  function getTasksForDate(date) {
    const tasks = [];
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤ –Ω–∞—á–∞–ª–æ –¥–Ω—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const startOfDay = new Date(date.getFullYear(), date.getMonth(), date.getDate());

    data.boards.forEach(board => {
      board.columns.forEach(column => {
        column.tasks.forEach(task => {
          if (task.deadline) {
            const taskDate = new Date(task.deadline);
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤ –Ω–∞—á–∞–ª–æ –¥–Ω—è –¥–ª—è –∑–∞–¥–∞—á–∏
            const taskStartOfDay = new Date(taskDate.getFullYear(), taskDate.getMonth(), taskDate.getDate());
            if (taskStartOfDay.getTime() === startOfDay.getTime()) {
              tasks.push({...task, boardId: board.id, columnId: column.id});
            }
          }
        });
      });
    });

    return tasks;
  }

  function openTaskFromCalendar(task) {
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω—É–∂–Ω—É—é –¥–æ—Å–∫—É
    data.selectedBoardId = task.boardId;

    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É
    const board = getSelectedBoard();
    const column = board.columns.find(col => col.id === task.columnId);

    if (column) {
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∏–¥ –¥–æ—Å–æ–∫ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–¥–∞—á–∏
      showBoardView();
      openTaskDialog(column, task);
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const calendarViewEl = document.getElementById('calendar-view');
  calendarViewEl?.addEventListener('click', () => {
    data.isCalendarView = true;
    data.selectedBoardId = null;
    saveData();
    render();
  });

  document.getElementById('prev-month').addEventListener('click', () => {
    currentDate.setMonth(currentDate.getMonth() - 1);
    renderCalendar();
  });

  document.getElementById('next-month').addEventListener('click', () => {
    currentDate.setMonth(currentDate.getMonth() + 1);
    renderCalendar();
  });

  function showBoardView() {
    data.isCalendarView = false;
    saveData();
    render();
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ—Å–æ–∫
  boardsEl.addEventListener('click', (e) => {
    if (e.target.id === 'calendar-view') return;

    const li = e.target.closest('li');
    if (!li) return;

    boardsEl.querySelectorAll('li').forEach(el => el.classList.remove('selected'));
    li.classList.add('selected');

    data.selectedBoardId = li.dataset.boardId;
    data.isCalendarView = false;
    saveData();
    render();

    if (window.innerWidth <= 768) {
      document.body.classList.remove('sidebar-open');
      sidebar.classList.remove('open');
    }
  });


  document.addEventListener('click', () => {
    document.querySelectorAll('.calendar-day').forEach(day => {
      day.classList.remove('selected');
      // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–ø–∏—Å–∫–∏ –∑–∞–¥–∞—á
      const taskList = day.querySelector('.task-list');
      if (taskList) {
        taskList.style.display = 'none';
      }
    });
  });

  document.querySelector('.main-calendar')?.addEventListener('click', (e) => {
    e.stopPropagation();
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∞–±—Ç–∞—Å–∫–æ–≤
  function getSubtasksStats(task) {
    let done = 0;
    let total = 0;

    function countSubtasks(subtaskIds) {
      subtaskIds.forEach(subtaskId => {
        const subtask = findTaskById(subtaskId);
        if (subtask) {
          if (!subtask.isInfo) {
            total++;
            if (subtask.done) done++;
          }
          if (subtask.subtasks && subtask.subtasks.length > 0) {
            countSubtasks(subtask.subtasks);
          }
        }
      });
    }

    if (task.subtasks) {
      countSubtasks(task.subtasks);
    }

    return { done, total };
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É touch-—Å–æ–±—ã—Ç–∏–π –¥–ª—è drag & drop
  initTouchDrag();
}export { initApp };

